{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Bem vindo \u00b6 Bem vindo \u00e0 documenta\u00e7\u00e3o para desenvolvedores do ERP SAM. Saiba Mais Para conhecer mais, visite o site oficial do SAM . Introdu\u00e7\u00e3o \u00b6 Este documento tem como finalidade apresentar as diferentes formas de cutomiza\u00e7\u00e3o de processos e integra\u00e7\u00e3o com os recursos e funcionalidades do ERP SAM, por exemplo, ao inserir um registro no sistema h\u00e1 a posiblidade de inferir neste processo realizando cr\u00edticas/retri\u00e7\u00f5es. O SAM \u00e9 um sistema totalmente adapt\u00e1vel e pode se enquadrar perfeitamente \u00e0s regras do seu n\u00e9gocio, al\u00e9m de se integrar perfeitamente a outros sistemas atuais do mercado. Aqui veremos como realizar estas customiza\u00e7\u00f5es de processos e integra\u00e7\u00f5es. Recomenda\u00e7\u00f5es \u00b6 O SAM utiliza como parte de seus componentes algumas bibliotecas e frameworks, antes de come\u00e7ar recomendamos que voc\u00ea leia e entenda um pouco mais sobre elas. VUE.js ApexCharts Quasar Swing Linguagens Utilizadas \u00b6 As customiza\u00e7\u00f5es e integra\u00e7\u00f5es com o SAM s\u00e3o contruidas a partir da linguagem Groovy. O Groovy \u00e9 uma linguagem de programa\u00e7\u00e3o orientada a objetos desenvolvida para a plataforma Java como alternativa \u00e0 linguagem de programa\u00e7\u00e3o Java. Ele possui caracter\u00edsticas de Python, Ruby e Smalltalk. Utiliza uma sintaxe similar \u00e0 de Java, \u00e9 compilada dinamicamente para bytecode Java e integra-se transparentemente com outros c\u00f3digos e bibliotecas Java. Visite a documenta\u00e7\u00e3o do Groovy . Os componentes gr\u00e1ficos renderizados na web s\u00e3o construidos com HTML, CSS e JavaScript, podendo ou n\u00e3o utilizar os componentes dos frameworks que vimos a cima. J\u00e1 os componentes gr\u00e1ficos rederizados em desktop s\u00e3o construidos com Swing. Como funciona \u00b6 Todas as customiza\u00e7\u00f5es e integra\u00e7\u00f5es podem ser construidas a partir do pr\u00f3prio SAM, nele voc\u00ea encontrar\u00e1 uma ferramenta j\u00e1 integrada e pronta para uso chamada SAMDEV, por\u00e9m, tamb\u00e9m podemos cri\u00e1-las a partir de qualquer outro editor de textos, editor de c\u00f3digos ou IDE de sua preferencia. Al\u00e9m do SAMDEV disponibilizamos dois projetos j\u00e1 integrados com as IDEs Eclipse e NetBeans, fa\u00e7a o download abaixo. Eclipse NetBeans Requisitos \u00b6 Para instalar do SAM e utilizar do SAMDEV ou outros Editores/IDEs, devemos instalar os seguintes requisitos: Java SE Development Kit 15.0.2 PostgreSQL Database 10.18 + Nota Visite nosso reposit\u00f3rio para visualizar alguns exemplos que iremos explorar por aqui. https://github.com/multitecsistemas/sam4","title":"Comece Aqui"},{"location":"#bem-vindo","text":"Bem vindo \u00e0 documenta\u00e7\u00e3o para desenvolvedores do ERP SAM. Saiba Mais Para conhecer mais, visite o site oficial do SAM .","title":"Bem vindo"},{"location":"#introducao","text":"Este documento tem como finalidade apresentar as diferentes formas de cutomiza\u00e7\u00e3o de processos e integra\u00e7\u00e3o com os recursos e funcionalidades do ERP SAM, por exemplo, ao inserir um registro no sistema h\u00e1 a posiblidade de inferir neste processo realizando cr\u00edticas/retri\u00e7\u00f5es. O SAM \u00e9 um sistema totalmente adapt\u00e1vel e pode se enquadrar perfeitamente \u00e0s regras do seu n\u00e9gocio, al\u00e9m de se integrar perfeitamente a outros sistemas atuais do mercado. Aqui veremos como realizar estas customiza\u00e7\u00f5es de processos e integra\u00e7\u00f5es.","title":"Introdu\u00e7\u00e3o"},{"location":"#recomendacoes","text":"O SAM utiliza como parte de seus componentes algumas bibliotecas e frameworks, antes de come\u00e7ar recomendamos que voc\u00ea leia e entenda um pouco mais sobre elas. VUE.js ApexCharts Quasar Swing","title":"Recomenda\u00e7\u00f5es"},{"location":"#linguagens-utilizadas","text":"As customiza\u00e7\u00f5es e integra\u00e7\u00f5es com o SAM s\u00e3o contruidas a partir da linguagem Groovy. O Groovy \u00e9 uma linguagem de programa\u00e7\u00e3o orientada a objetos desenvolvida para a plataforma Java como alternativa \u00e0 linguagem de programa\u00e7\u00e3o Java. Ele possui caracter\u00edsticas de Python, Ruby e Smalltalk. Utiliza uma sintaxe similar \u00e0 de Java, \u00e9 compilada dinamicamente para bytecode Java e integra-se transparentemente com outros c\u00f3digos e bibliotecas Java. Visite a documenta\u00e7\u00e3o do Groovy . Os componentes gr\u00e1ficos renderizados na web s\u00e3o construidos com HTML, CSS e JavaScript, podendo ou n\u00e3o utilizar os componentes dos frameworks que vimos a cima. J\u00e1 os componentes gr\u00e1ficos rederizados em desktop s\u00e3o construidos com Swing.","title":"Linguagens Utilizadas"},{"location":"#como-funciona","text":"Todas as customiza\u00e7\u00f5es e integra\u00e7\u00f5es podem ser construidas a partir do pr\u00f3prio SAM, nele voc\u00ea encontrar\u00e1 uma ferramenta j\u00e1 integrada e pronta para uso chamada SAMDEV, por\u00e9m, tamb\u00e9m podemos cri\u00e1-las a partir de qualquer outro editor de textos, editor de c\u00f3digos ou IDE de sua preferencia. Al\u00e9m do SAMDEV disponibilizamos dois projetos j\u00e1 integrados com as IDEs Eclipse e NetBeans, fa\u00e7a o download abaixo. Eclipse NetBeans","title":"Como funciona"},{"location":"#requisitos","text":"Para instalar do SAM e utilizar do SAMDEV ou outros Editores/IDEs, devemos instalar os seguintes requisitos: Java SE Development Kit 15.0.2 PostgreSQL Database 10.18 + Nota Visite nosso reposit\u00f3rio para visualizar alguns exemplos que iremos explorar por aqui. https://github.com/multitecsistemas/sam4","title":"Requisitos"},{"location":"componentes/","text":"Componentes \u00b6 Componentes de Software \u00e9 o termo utilizado para descrever o elemento de software que encapsula uma s\u00e9rie de funcionalidades. Os componentes abaixo listados foram desenvolvidos pela Multitec para uso exclusivo no SAM. Estes componentes s\u00e3o baseados na sintaxe das tags HTML, s\u00e3o construidos a partir do framework VUE.js e podem ser utilizados para a cria\u00e7\u00e3o de filtros que s\u00e3o utilizados nos processos de Extra\u00e7\u00e3o de Dados . Atributos Default \u00b6 Assim como nas tags do HTML os componentes Multitec tamb\u00e9m possuem seus atributos. Todos os componentes por default possuem os seguintes atributos para a sua configura\u00e7\u00e3o. Nome Descri\u00e7\u00e3o Valores Permitidos Valor Default label Label para o campo * - help Texto de ajuda para o campo * - id ID do campo * - wrapperClass Classe (css) para a DIV wrapper do input * - showWrapper Indica se a DIV wrapper do componente ser\u00e1 exibida * - required Indica se esse campo \u00e9 requerido true, false false v-model Nome do componente, utilizado para obter seu valor * - m-input \u00b6 Este componente renderiza um campo input para textos, com os seguintes atributos: Nome Descri\u00e7\u00e3o Valores Permitidos Default type Tipo do conte\u00fado aceito text, integer, decimal, monthYear - Exemplo: < m-input type = \"text\" label = \"Campo de texto\" help = \"Campo obrigat\u00f3rio\" v-model = \"filtros.texto\" :required = \"true\" /> m-check \u00b6 Este componente renderiza um campo checkbox , com os seguintes atributos: Nome Descri\u00e7\u00e3o Valores Permitidos Valor Default option Define qual o valor ser\u00e1 enviado para o modelo * true inline Define se ser\u00e1 renderizado sem quebra de linha false, true false multiple Agrupa os CheckBox com o mesmo nome em um array false, true false Exemplo: < m-check label = \"Marque este campo\" v-model = \"filtros.texto\" :required = \"true\" /> m-radio \u00b6 Este componente renderiza um campo radio , com os seguintes atributos: Nome Descri\u00e7\u00e3o Valores Permitidos Valor Default option Define qual o valor ser\u00e1 enviado para o modelo * true inline Define se ser\u00e1 renderizado sem quebra de linha false, true false Exemplo: < m-radio label = \" Marque este campo\" option = \"0\" v-model = \"filtros.texto\" :required = \"true\" /> m-date \u00b6 Este componente renderiza um campo input do tipo date , com os seguintes atributos: Nome Descri\u00e7\u00e3o Valores Permitidos Valor Default format Fun\u00e7\u00e3o destinada para a formata\u00e7\u00e3o de datas Function (JavaScript) - min Menor data permitida para o componente dd/MM/yyyy - max Maior data permitida para o componente dd/MM/yyyy - Exemplo: < m-date min = \"01/01/2000\" max = \"31/12/2100\" label = \"Selecione uma data\" v-model = \"filtros.data\" :required = \"true\" /> m-date-interval \u00b6 Exibe um painel para informar um intervalo de datas, os atributos s\u00e3o iguais aos do m-date. Exemplo: < m-date-interval min = \"01/01/2000\" max = \"31/12/2100\" label = \"Selecione duas data\" v-model = \"filtros.data\" :required = \"true\" /> m-selec \u00b6 Exibe um componente que pode ser renderizado como um ComboBox ou como um AutoComplete. Nome Descri\u00e7\u00e3o Valores Permitidos Valor Default multiple Indica se \u00e9 permitido selecionar mais de um elemento true, false false placeholder Texto exibido quando nenhum item est\u00e1 selecionado * - selectFirstOnLoad Seleciona o primeiro elemento quando renderizado true, false false showClearButton Indica ir\u00e1 exibir o bot\u00e3o limpar true, false true options Array de objetos que ser\u00e3o exibidos no ComboBox Array[Object] - adicionaWherePadrao indica se deve adicionar o where padr\u00e3o \u00e0 select true, false true request Define como os dados para o componente ser\u00e3o obtidos Object - Nota Para entender melhor o atributo adicionaWherePadrao veja nosso manual, nos t\u00f3picos: Tabelas , Grupos Centralizadores e Uso dos Registros . Existem duas maneiras de se preencher um ComboBox, atrav\u00e9s de dados fixos ou atrav\u00e9s de registros vindo do banco de dados, veja como realizar estas duas op\u00e7\u00f5es: Atributo options \u00b6 Este atributo permite iniciar o componente m-select com algumas op\u00e7\u00f5es default, estas op\u00e7\u00f5es podem ser definidas atrav\u00e9s do atributo options . O Objeto do Array pode ter 3 propriedades: value : Valor que ser\u00e1 enviado para o model. label : Valor que ser\u00e1 exibido no componente quando selecionado. option : Texto que ser\u00e1 exibido quando a caixa do ComboBox for aberta. Exemplo: HTML JS < m-select label = \"Op\u00e7\u00f5es\" :multiple = \"false\" placeholder = \"Selecione uma op\u00e7\u00e3o\" :options = \"opcoes\" /> const classe = { data : { opcoes : [ { value : 0 , label : 'Op\u00e7\u00e3o 1' , option : 'Selecionado a op\u00e7\u00e3o 1' }, { value : 1 , label : 'Op\u00e7\u00e3o 2' , option : 'Selecionado a op\u00e7\u00e3o 1' }, { value : 2 , label : 'Op\u00e7\u00e3o 3' , option : 'Selecionado a op\u00e7\u00e3o 1' }, ] }, onLoad : function () {}, methods : {} } Atributo request \u00b6 Esse atributo define como os dados para o ComboBox ser\u00e3o obtidos no Servidor. O Objeto do Array pode ter 4 propriedades: table : Indicando qual a tabela da select. columns : Lista de colunas separadas por virgula. data : Indica se a select conter\u00e1 JOIN ou WHERE. join : Array definido por chave e valor da seguinte forma: inner : Indica que o valor referente a chave inner ser\u00e1 implementado como um INNER JOIN. left : Indica que o valor referente a chave left ser\u00e1 implementado como um LEFT JOIN. where : Array definido por chave e valor da seguinte forma: nome : Nome do campo a ser constitu\u00eddo com o seu valor no WHERE. valor : Valor a ser comparado no WHERE. customWhere : String contendo uma condi\u00e7\u00e3o WHERE livre. iniFimColumn : Por padr\u00e3o o retorno do componente m-select \u00e9 o campo ID da tabela. Esta propriedade altera a coluna que vir\u00e1 no resultado da request. Exemplo: HTML JS < m-select label = \"Usu\u00e1rios\" :multiple = \"false\" placeholder = \"Selecione uma op\u00e7\u00e3o\" :request = \"request\" /> const classe = { data : { request : { table : 'aab10' , columns : 'aab10nome, aab10email' , data : { join : { inner : 'aab10emprDefault' , left : 'aab10credSamPalm' }, where : { aab10user : 'MASTER' }, customWhere : 'AND aab10id = 5000' } } }, onLoad : function () {}, methods : {} } m-panel-check-mpms \u00b6 Este componente exibe um painel com 4 Checkbox que s\u00e3o utilizados para filtrar os registros de um m-select por Material, Produto, Mercadoria ou Servi\u00e7o . Nota Para entender melhor o componente m-panel-check-mpms veja nosso manual, no t\u00f3pico: Itens > Tipos de Itens . Nome Descri\u00e7\u00e3o Valores Permitidos Valor Default selectRef Indicando qual o REF do m-select que deseja controlar true, false - showMaterial Indica se ir\u00e1 exibir o check de Material * true showProduto Indica se ir\u00e1 exibir o check de Produto true, false true showMercadoria Indica se ir\u00e1 exibir o check de Mercadoria true, false true showServico Indica se ir\u00e1 exibir o check de Servi\u00e7o true, false true Exemplo: HTML JS < m-panel-check-mpms selectRef = \"selectItem\" /> < m-select label = \"Itens\" :multiple = \"false\" ref = \"selectItem\" :request = \"request\" /> const classe = { data : { request : { table : 'abm01' , columns : 'abm01codigo, abm01na' , } }, onLoad : function () {}, methods : {} } m-panel-criterio \u00b6 Este componente exibe um painel que permite a utiliza\u00e7\u00e3o dos crit\u00e9rios de sele\u00e7\u00e3o nos filtros. Nota Para entender melhor o componente m-panel-criterio veja nosso manual, no t\u00f3pico: Crit\u00e9rios de Sele\u00e7\u00e3o . Nome Descri\u00e7\u00e3o Valores Permitidos Valor Default tipo Informa qual a aplica\u00e7\u00e3o do crit\u00e9rio entidade, item, trabalhador - Exemplo: < m-panel-criterio tipo = \"entidade\" v-model = 'filtros.criterios' /> Para saber mais Al\u00e9m dos atributos apresentados aqui, todos os componentes podem utilizar os atributos padr\u00f5es do HTML5.","title":"Componentes"},{"location":"componentes/#componentes","text":"Componentes de Software \u00e9 o termo utilizado para descrever o elemento de software que encapsula uma s\u00e9rie de funcionalidades. Os componentes abaixo listados foram desenvolvidos pela Multitec para uso exclusivo no SAM. Estes componentes s\u00e3o baseados na sintaxe das tags HTML, s\u00e3o construidos a partir do framework VUE.js e podem ser utilizados para a cria\u00e7\u00e3o de filtros que s\u00e3o utilizados nos processos de Extra\u00e7\u00e3o de Dados .","title":"Componentes"},{"location":"componentes/#atributos-default","text":"Assim como nas tags do HTML os componentes Multitec tamb\u00e9m possuem seus atributos. Todos os componentes por default possuem os seguintes atributos para a sua configura\u00e7\u00e3o. Nome Descri\u00e7\u00e3o Valores Permitidos Valor Default label Label para o campo * - help Texto de ajuda para o campo * - id ID do campo * - wrapperClass Classe (css) para a DIV wrapper do input * - showWrapper Indica se a DIV wrapper do componente ser\u00e1 exibida * - required Indica se esse campo \u00e9 requerido true, false false v-model Nome do componente, utilizado para obter seu valor * -","title":"Atributos Default"},{"location":"componentes/#m-input","text":"Este componente renderiza um campo input para textos, com os seguintes atributos: Nome Descri\u00e7\u00e3o Valores Permitidos Default type Tipo do conte\u00fado aceito text, integer, decimal, monthYear - Exemplo: < m-input type = \"text\" label = \"Campo de texto\" help = \"Campo obrigat\u00f3rio\" v-model = \"filtros.texto\" :required = \"true\" />","title":"m-input"},{"location":"componentes/#m-check","text":"Este componente renderiza um campo checkbox , com os seguintes atributos: Nome Descri\u00e7\u00e3o Valores Permitidos Valor Default option Define qual o valor ser\u00e1 enviado para o modelo * true inline Define se ser\u00e1 renderizado sem quebra de linha false, true false multiple Agrupa os CheckBox com o mesmo nome em um array false, true false Exemplo: < m-check label = \"Marque este campo\" v-model = \"filtros.texto\" :required = \"true\" />","title":"m-check"},{"location":"componentes/#m-radio","text":"Este componente renderiza um campo radio , com os seguintes atributos: Nome Descri\u00e7\u00e3o Valores Permitidos Valor Default option Define qual o valor ser\u00e1 enviado para o modelo * true inline Define se ser\u00e1 renderizado sem quebra de linha false, true false Exemplo: < m-radio label = \" Marque este campo\" option = \"0\" v-model = \"filtros.texto\" :required = \"true\" />","title":"m-radio"},{"location":"componentes/#m-date","text":"Este componente renderiza um campo input do tipo date , com os seguintes atributos: Nome Descri\u00e7\u00e3o Valores Permitidos Valor Default format Fun\u00e7\u00e3o destinada para a formata\u00e7\u00e3o de datas Function (JavaScript) - min Menor data permitida para o componente dd/MM/yyyy - max Maior data permitida para o componente dd/MM/yyyy - Exemplo: < m-date min = \"01/01/2000\" max = \"31/12/2100\" label = \"Selecione uma data\" v-model = \"filtros.data\" :required = \"true\" />","title":"m-date"},{"location":"componentes/#m-date-interval","text":"Exibe um painel para informar um intervalo de datas, os atributos s\u00e3o iguais aos do m-date. Exemplo: < m-date-interval min = \"01/01/2000\" max = \"31/12/2100\" label = \"Selecione duas data\" v-model = \"filtros.data\" :required = \"true\" />","title":"m-date-interval"},{"location":"componentes/#m-selec","text":"Exibe um componente que pode ser renderizado como um ComboBox ou como um AutoComplete. Nome Descri\u00e7\u00e3o Valores Permitidos Valor Default multiple Indica se \u00e9 permitido selecionar mais de um elemento true, false false placeholder Texto exibido quando nenhum item est\u00e1 selecionado * - selectFirstOnLoad Seleciona o primeiro elemento quando renderizado true, false false showClearButton Indica ir\u00e1 exibir o bot\u00e3o limpar true, false true options Array de objetos que ser\u00e3o exibidos no ComboBox Array[Object] - adicionaWherePadrao indica se deve adicionar o where padr\u00e3o \u00e0 select true, false true request Define como os dados para o componente ser\u00e3o obtidos Object - Nota Para entender melhor o atributo adicionaWherePadrao veja nosso manual, nos t\u00f3picos: Tabelas , Grupos Centralizadores e Uso dos Registros . Existem duas maneiras de se preencher um ComboBox, atrav\u00e9s de dados fixos ou atrav\u00e9s de registros vindo do banco de dados, veja como realizar estas duas op\u00e7\u00f5es:","title":"m-selec"},{"location":"componentes/#atributo-options","text":"Este atributo permite iniciar o componente m-select com algumas op\u00e7\u00f5es default, estas op\u00e7\u00f5es podem ser definidas atrav\u00e9s do atributo options . O Objeto do Array pode ter 3 propriedades: value : Valor que ser\u00e1 enviado para o model. label : Valor que ser\u00e1 exibido no componente quando selecionado. option : Texto que ser\u00e1 exibido quando a caixa do ComboBox for aberta. Exemplo: HTML JS < m-select label = \"Op\u00e7\u00f5es\" :multiple = \"false\" placeholder = \"Selecione uma op\u00e7\u00e3o\" :options = \"opcoes\" /> const classe = { data : { opcoes : [ { value : 0 , label : 'Op\u00e7\u00e3o 1' , option : 'Selecionado a op\u00e7\u00e3o 1' }, { value : 1 , label : 'Op\u00e7\u00e3o 2' , option : 'Selecionado a op\u00e7\u00e3o 1' }, { value : 2 , label : 'Op\u00e7\u00e3o 3' , option : 'Selecionado a op\u00e7\u00e3o 1' }, ] }, onLoad : function () {}, methods : {} }","title":"Atributo options"},{"location":"componentes/#atributo-request","text":"Esse atributo define como os dados para o ComboBox ser\u00e3o obtidos no Servidor. O Objeto do Array pode ter 4 propriedades: table : Indicando qual a tabela da select. columns : Lista de colunas separadas por virgula. data : Indica se a select conter\u00e1 JOIN ou WHERE. join : Array definido por chave e valor da seguinte forma: inner : Indica que o valor referente a chave inner ser\u00e1 implementado como um INNER JOIN. left : Indica que o valor referente a chave left ser\u00e1 implementado como um LEFT JOIN. where : Array definido por chave e valor da seguinte forma: nome : Nome do campo a ser constitu\u00eddo com o seu valor no WHERE. valor : Valor a ser comparado no WHERE. customWhere : String contendo uma condi\u00e7\u00e3o WHERE livre. iniFimColumn : Por padr\u00e3o o retorno do componente m-select \u00e9 o campo ID da tabela. Esta propriedade altera a coluna que vir\u00e1 no resultado da request. Exemplo: HTML JS < m-select label = \"Usu\u00e1rios\" :multiple = \"false\" placeholder = \"Selecione uma op\u00e7\u00e3o\" :request = \"request\" /> const classe = { data : { request : { table : 'aab10' , columns : 'aab10nome, aab10email' , data : { join : { inner : 'aab10emprDefault' , left : 'aab10credSamPalm' }, where : { aab10user : 'MASTER' }, customWhere : 'AND aab10id = 5000' } } }, onLoad : function () {}, methods : {} }","title":"Atributo request"},{"location":"componentes/#m-panel-check-mpms","text":"Este componente exibe um painel com 4 Checkbox que s\u00e3o utilizados para filtrar os registros de um m-select por Material, Produto, Mercadoria ou Servi\u00e7o . Nota Para entender melhor o componente m-panel-check-mpms veja nosso manual, no t\u00f3pico: Itens > Tipos de Itens . Nome Descri\u00e7\u00e3o Valores Permitidos Valor Default selectRef Indicando qual o REF do m-select que deseja controlar true, false - showMaterial Indica se ir\u00e1 exibir o check de Material * true showProduto Indica se ir\u00e1 exibir o check de Produto true, false true showMercadoria Indica se ir\u00e1 exibir o check de Mercadoria true, false true showServico Indica se ir\u00e1 exibir o check de Servi\u00e7o true, false true Exemplo: HTML JS < m-panel-check-mpms selectRef = \"selectItem\" /> < m-select label = \"Itens\" :multiple = \"false\" ref = \"selectItem\" :request = \"request\" /> const classe = { data : { request : { table : 'abm01' , columns : 'abm01codigo, abm01na' , } }, onLoad : function () {}, methods : {} }","title":"m-panel-check-mpms"},{"location":"componentes/#m-panel-criterio","text":"Este componente exibe um painel que permite a utiliza\u00e7\u00e3o dos crit\u00e9rios de sele\u00e7\u00e3o nos filtros. Nota Para entender melhor o componente m-panel-criterio veja nosso manual, no t\u00f3pico: Crit\u00e9rios de Sele\u00e7\u00e3o . Nome Descri\u00e7\u00e3o Valores Permitidos Valor Default tipo Informa qual a aplica\u00e7\u00e3o do crit\u00e9rio entidade, item, trabalhador - Exemplo: < m-panel-criterio tipo = \"entidade\" v-model = 'filtros.criterios' /> Para saber mais Al\u00e9m dos atributos apresentados aqui, todos os componentes podem utilizar os atributos padr\u00f5es do HTML5.","title":"m-panel-criterio"},{"location":"criteria/","text":"","title":"Criteria"},{"location":"criterion/","text":"","title":"Criterion"},{"location":"metodos/","text":"M\u00e9todos \u00b6 Para facilitar o desenvolvimento das customiza\u00e7\u00f5es e integra\u00e7\u00f5es o SAM conta com uma vasta biblioteca de m\u00e9todos e fun\u00e7\u00f5es para realizar os mais diversos tipos de processos. Em defini\u00e7\u00e3o, um m\u00e9todo \u00e9 equivalente a uma fun\u00e7\u00e3o, subrotina ou procedimento escrito em uma certa linguagem de programa\u00e7\u00e3o. Nota A partir de agora veremos alguns termos que s\u00e3o exclusivos do SAM, recomendamos fortemente que voc\u00ea leia e conhe\u00e7a um pouco mais sobre a estrutura do SAM. Visite nosso manual . Os m\u00e9todos que veremos a seguir, pode ou n\u00e3o estar dispon\u00edvel para utiliza\u00e7\u00e3o nos Tipos de Processos existentes no SAM. Estes processos s\u00e3o dividos em dois grupos, os que s\u00e3o criados a partir do SAMDEV e os Scripts de Opera\u00e7\u00f5es que s\u00e3o criados a partir de cada tarefa espec\u00edfica. Cada processo ser\u00e1 identificado como: F\u00f3rmulas, Listagens, Cubos de Decis\u00f5es, Servlets, Script de Opera\u00e7\u00f5es. obterEmpresaAtiva \u00b6 Este m\u00e9todo retorna um objeto do tipo Aac10 contendo os dados da empresa ativa. Exemplo def aac10 = obterEmpresaAtiva () obterUsuarioLogado \u00b6 Este m\u00e9todo retorna um objeto do tipo Aab10 contendo os dados do usu\u00e1rio logado no sistema. Exemplo def aab10 = obterUsuarioLogado () getAcessoAoBanco \u00b6 Este m\u00e9todo retorna uma cole\u00e7\u00e3o de m\u00e9todos uteis para manipula\u00e7\u00e3o do banco de dados descritos a baixo: buscarListaDeTableMap \u00b6 Este m\u00e9todos retorna uma lista de TableMap contendo os registros obtidos a partir da execu\u00e7\u00e3o de uma SQL. Argumentos: arg1: String - SQL a ser executada. arg2: ? boolean - Define se o resultado ser\u00e1 paginado. arg3: ? int - P\u00e1gina a iniciar. arg4: ? Array[ Parametro ] - Par\u00eametros existentes na SQL. Exemplo Retorno getAcessoAoBanco (). buscarListaDeTableMap ( \"SELECT aac10codigo, aac10rs FROM aac10\" ) { 0 : { \"aac10codigo\" : \"00001\" , \"aac10rs\" : \"Empresa Fict\u00edcia LTDA\" }, 1 : { \"aac10codigo\" : \"00002\" , \"aac10rs\" : \"Empresa Teste LTDA\" } } buscarUnicoTableMap \u00b6 Este m\u00e9todos retorna um \u00fanico TableMap contendo o registro obtido a partir da execu\u00e7\u00e3o de uma SQL. Argumentos: arg1: String - SQL a ser executada. arg2: ? Array[ Parametro ] - Par\u00eametros existentes na SQL. Exemplo Retorno getAcessoAoBanco (). buscarUnicoTableMap ( \"SELECT aac10codigo, aac10rs FROM aac10 WHERE aac10codigo = '00001'\" ) { \"aac10codigo\" : \"00001\" , \"aac10rs\" : \"Empresa Fict\u00edcia LTDA\" } buscarListaDeRegistros \u00b6 Este m\u00e9todos retorna uma lista de Registros obtidos a partir da execu\u00e7\u00e3o de uma SQL. Argumentos: arg1: String - SQL a ser executada. arg2: ? boolean - Define se o resultado ser\u00e1 paginado. arg3: ? int - P\u00e1gina a iniciar. arg4: ? Array[ Parametro ] - Par\u00eametros existentes na SQL. Exemplo Retorno getAcessoAoBanco (). buscarListaDeRegistros ( \"SELECT aac10id, aac10codigo, aac10rs FROM aac10\" ) { 0 : object ( Aac10 ) # 1 ( 3 ) { private aac10id = 12345 , private aac10codigo = \"00001\" , private aac10rs = \"Empresa Fict\u00edcia LTDA\" }, 1 : object ( Aac10 ) # 2 ( 3 ) { private aac10id = 12346 , private aac10codigo = \"00002\" , private aac10rs = \"Empresa Teste LTDA\" } } buscarRegistroUnico \u00b6 Este m\u00e9todos retorna um \u00fanico Registro obtido a partir da execu\u00e7\u00e3o de uma SQL. Argumentos: arg1: String - SQL a ser executada. arg2: ? Array[ Parametro ] - Par\u00eametros existentes na SQL. Exemplo Retorno getAcessoAoBanco (). buscarRegistroUnico ( \"SELECT aac10id, aac10codigo, aac10rs FROM aac10 WHERE aac10id = 12345\" ) object ( Aac10 ) # 1 ( 3 ) { private aac10id = 12345 , private aac10codigo = \"00001\" , private aac10rs = \"Empresa Fict\u00edcia LTDA\" } buscarMultiResultSet \u00b6 Este m\u00e9todos retorna um objeto do tipo MultiResultSet contendo os registros obtidos a partir da execu\u00e7\u00e3o de uma SQL. Argumentos: arg1: String - SQL a ser executada. arg2: ? Array[ Parametro ] - Par\u00eametros existentes na SQL. Exemplo Retorno getAcessoAoBanco (). buscarMultiResultSet ( \"SELECT aac10codigo, aac10rs FROM aac10\" ) object ( MultiResultSet ) # 1 ( 2 ) { aac10codigo = \"00001\" , aac10rs = \"Empresa Fict\u00edcia LTDA\" } obterMapDeRegistros \u00b6 Este m\u00e9todos retorna um Mapa contendo os registros obtidos a partir da execu\u00e7\u00e3o de uma SQL. Argumentos: arg1: String - SQL a ser executada. arg2: String - Nome da coluna que ser\u00e1 a chave. arg3: String - Nome da coluna que ser\u00e1 o valor. Exemplo Retorno getAcessoAoBanco (). buscarMultiResultSet ( \"SELECT aac10codigo, aac10rs FROM aac10\" , \"aac10codigo\" , \"aac10rs\" ) object ( HashMap ) # 1 ( 2 ) { \"aac10codigo\" : \"00001\" , \"aac10rs\" : \"Empresa Fict\u00edcia LTDA\" } obterListaDeBigDecimal \u00b6 Este m\u00e9todos retorna uma lista de Decimais obtidos a partir da execu\u00e7\u00e3o de uma SQL. Argumentos: arg1: String - SQL a ser executada. arg2: ? boolean - Define se o resultado ser\u00e1 paginado. arg3: ? int - P\u00e1gina a iniciar. arg4: ? Array[ Parametro ] - Par\u00eametros existentes na SQL. Exemplo Retorno getAcessoAoBanco (). obterListaDeBigDecimal ( \"SELECT eaa01valor FROM Eaa01\" ) { 0 : 256.012 1 : 45.6988 } obterBigDecimal \u00b6 Este m\u00e9todos retorna um Decimal obtido a partir da execu\u00e7\u00e3o de uma SQL. Argumentos: arg1: String - SQL a ser executada. arg2: ? Array[ Parametro ] - Par\u00eametros existentes na SQL. Exemplo Retorno getAcessoAoBanco (). obterBigDecimal ( \"SELECT eaa01valor FROM eaa01 WHERE eaa01id = 12345\" ) 457.65559 obterListaDeInteger \u00b6 Este m\u00e9todos retorna uma lista de Inteiros obtidos a partir da execu\u00e7\u00e3o de uma SQL. Argumentos: arg1: String - SQL a ser executada. arg2: ? boolean - Define se o resultado ser\u00e1 paginado. arg3: ? int - P\u00e1gina a iniciar. arg4: ? Array[ Parametro ] - Par\u00eametros existentes na SQL. Exemplo Retorno getAcessoAoBanco (). obterListaDeInteger ( \"SELECT eaa01esMov FROM Eaa01\" ) { 0 : 0 1 : 1 } obterInteger \u00b6 Este m\u00e9todos retorna um Inteiro obtido a partir da execu\u00e7\u00e3o de uma SQL. Argumentos: arg1: String - SQL a ser executada. arg2: ? Array[ Parametro ] - Par\u00eametros existentes na SQL. Exemplo Retorno getAcessoAoBanco (). obterInteger ( \"SELECT eaa01esMov FROM eaa01 WHERE eaa01id = 12345\" ) 1 obterListaDeDate \u00b6 Este m\u00e9todos retorna uma lista de objetos do tipo LocalDate obtidos a partir da execu\u00e7\u00e3o de uma SQL. Argumentos: arg1: String - SQL a ser executada. arg2: ? boolean - Define se o resultado ser\u00e1 paginado. arg3: ? int - P\u00e1gina a iniciar. arg4: ? Array[ Parametro ] - Par\u00eametros existentes na SQL. Exemplo Retorno getAcessoAoBanco (). obterListaDeDate ( \"SELECT abb01data FROM abb01\" ) { 0 : \"2021-01-01\" 1 : \"2020-02-10\" } obterDate \u00b6 Este m\u00e9todos retorna um objeto do tipo LocalDate obtido a partir da execu\u00e7\u00e3o de uma SQL. Argumentos: arg1: String - SQL a ser executada. arg2: ? Array[ Parametro ] - Par\u00eametros existentes na SQL. Exemplo Retorno getAcessoAoBanco (). obterDate ( \"SELECT abb01data FROM abb01data WHERE abb01id = 12345\" ) \"2021-12-31\" obterListaDeString \u00b6 Este m\u00e9todos retorna uma lista de String obtidas a partir da execu\u00e7\u00e3o de uma SQL. Argumentos: arg1: String - SQL a ser executada. arg2: ? boolean - Define se o resultado ser\u00e1 paginado. arg3: ? int - P\u00e1gina a iniciar. arg4: ? Array[ Parametro ] - Par\u00eametros existentes na SQL. Exemplo Retorno getAcessoAoBanco (). obterListaDeString ( \"SELECT abh80nome FROM abh80\" ) { 0 : \"Jos\u00e9 Pereira Lima\" 1 : \"Alberto Mendes\" } obterString \u00b6 Este m\u00e9todos retorna uma String obtida a partir da execu\u00e7\u00e3o de uma SQL. Argumentos: arg1: String - SQL a ser executada. arg2: ? Array[ Parametro ] - Par\u00eametros existentes na SQL. Exemplo Retorno getAcessoAoBanco (). obterString ( \"SELECT abh80nome FROM abh80 WHERE abh80id = 12345\" ) \"Pedro Siqueira de Campos\" obterListaDeLong \u00b6 Este m\u00e9todos retorna uma lista de Log obtidos a partir da execu\u00e7\u00e3o de uma SQL. Argumentos: arg1: String - SQL a ser executada. arg2: ? boolean - Define se o resultado ser\u00e1 paginado. arg3: ? int - P\u00e1gina a iniciar. arg4: ? Array[ Parametro ] - Par\u00eametros existentes na SQL. Exemplo Retorno getAcessoAoBanco (). obterListaDeLong ( \"SELECT aac10id FROM aac10\" ) { 0 : 9513697880 1 : 1055006470 } obterLong \u00b6 Este m\u00e9todos retorna um Long obtido a partir da execu\u00e7\u00e3o de uma SQL. Argumentos: arg1: String - SQL a ser executada. arg2: ? Array[ Parametro ] - Par\u00eametros existentes na SQL. Exemplo Retorno getAcessoAoBanco (). obterLong ( \"SELECT aac10id FROM aac10 WHERE aac10id = 1234567890\" ) 1234567890 buscarRegistroUnicoById \u00b6 Este m\u00e9todo retorna um registro de uma tabela pelo id informado como argumento. Argumentos: arg1: String - Nome da tabela. arg2: Long - ID do registro. Exemplo Retorno getAcessoAoBanco (). buscarRegistroUnicoById ( \"Aah03\" , 12345 ) object ( Aah03 ) # 1 ( 2 ) { private aah03id = 12345 , private aah03tabela = \"Tabela Custom\" } buscarRegistroUnicoByCriterion \u00b6 Este m\u00e9todo retorna um registro de uma tabela filtrado por um Criterion . Argumentos: arg1: String - Nome da tabela. arg2: Criterion - Filtro. Exemplo Retorno return getAcessoAoBanco (). buscarRegistroUnicoByCriterion ( \"Aah03\" , Criterions . eq ( \"aah03id\" , 12345 )) object ( Aah03 ) # 1 ( 2 ) { private aah03id = 12345 , private aah03tabela = \"Tabela Custom\" } criarParametroSql \u00b6 Este m\u00e9todo retorna um objeto do tipo Parametro para ser utilizado nos m\u00e9todos que realizam a manipula\u00e7\u00e3o do banco de dados que vimos acima. Argumentos: arg1: String - Chave arg2: Object - Valor Exemplo def sql = \" SELECT * FROM Abm01 WHERE abm01codigo = :codigo AND abm01tipo = :tipo \" def paramCodigo = criarParametroSql ( \"codigo\" , \"0101001\" ) def paramTipo = criarParametroSql ( \"tipo\" , 0 ) return getAcessoAoBanco (). buscarRegistroUnico ( sql , paramCodigo , paramTipo ) obterWherePadrao \u00b6 Este m\u00e9todo retorna um WHERE filtrando pelos Campos Default para ser utilizado em SQLs. Argumentos: arg1: String - Nome da Classe arg2: ? String - Comparador Ex.: WHERE, AND, OR Exemplo Retorno def sql = \"SELECT * FROM Eaa01 WHERE eaa01id = 123 \" + obterWherePadrao ( \"Eaa01\" , \"AND\" ) \"SELECT * FROM Eaa01 WHERE eaa01id = 123 AND eaa01gc IN (1, 2, 3)\" selecionarAlinhamento \u00b6 O alinhamento de valores permite fazer um alinhamento dos campos de registros contidos em um leiaute, uma f\u00f3rmula, em listagens para alinhar campos livres do sistema (Json), possibilitando usar nas f\u00f3rmulas um nome padronizado. Este m\u00e9todo seleciona qual alinhamento de valores ser\u00e1 utilizado no script Argumentos: arg1: String - C\u00f3digo do alinhamento Exemplo selecionarAlinhamento ( \"0001\" ) getCampo \u00b6 Este m\u00e9todo retorna o campo informado no alinhamento de valores pelo conte\u00fado do registro. Este m\u00e9todo deve ser utilizado ap\u00f3s a utiliza\u00e7\u00e3o do m\u00e9todo selecionarAlinhamento Argumentos: arg1: String - Registro arg2: String - Campo Exemplo getCampo ( \"C100\" , \"ICMS\" ) getSession \u00b6 Este m\u00e9todo retorna um objeto do tipo Session . Exemplo def session = getSession () session . persist ( abc ) interromper \u00b6 Este m\u00e9todo lan\u00e7a uma exce\u00e7\u00e3o ao processo, interrompendo-o. Argumentos: arg1: String - Mensagem a ser exibida. Exemplo interromper ( \"Voc\u00ea n\u00e3o tem permiss\u00e3o para continuar.\" ) converterCorpoRequisicaoParaString \u00b6 Este m\u00e9todo converte o corpo da requisi\u00e7\u00e3o enviado a um Servlet para String. Exemplo def body = converterCorpoRequisicaoParaString () converterCorpoRequisicaoParaObjeto \u00b6 Este m\u00e9todo converte o corpo da requisi\u00e7\u00e3o enviado a um Servlet para um objeto do tipo informado como argumento. Argumentos: arg1: Class<?> - Tipo do objeto que ser\u00e1 convertido Exemplo TableMap body = converterCorpoRequisicaoParaObjeto ( TableMap . class ) getParametroRequisicao \u00b6 Este m\u00e9todo retorna o conteudo de um par\u00eametro enviado ao Servlet via URL. Argumentos: arg1: String - Nome do par\u00e2metro Exemplo // URL: https://endereco.sam/caminhoServlet?id_registro=12345 def id_registro = getParametroRequisicao ( \"id_registro\" ) M\u00e9todos get() \u00b6 Sempre que uma Listagem, um Cubo ou uma F\u00f3rmula \u00e9 executado, alguns dados precisam ser enviados para o processo, estes dados podem ser conteudo dos filtros, no caso dos processos de extra\u00e7\u00e3o de dados ou das tarefas que enviam informa\u00e7\u00f5es para as f\u00f3rmulas. O envio deste dado \u00e9 feito atrav\u00e9s de um Mapa de chave e valor, para recuperar estes dados utilizamos o m\u00e9todo get() e suas varia\u00e7\u00f5es. Exemplo: Em um relat\u00f3rio existe um campo de data e foi atribuido o nome dataDeInicio . < m-date label = \"Data de Inicio\" v-model = \"filtros.dataDeInicio\" /> Para recuperar o conteudo deste campo a partir do c\u00f3digo groovy utilizamos o m\u00e9todo get() . def dataDeInicio = get ( \"dataDeInicio\" ) Este m\u00e9todo por si s\u00f3 retorna um objeto. Cantamos com alguma varia\u00e7\u00f5es deste m\u00e9todo que nos trazem os dados j\u00e1 convertidos. M\u00e9todo Retorno M\u00e9todo Retorno getString() Texto getLocalDate() Data getBoolean() Booleano getLocalTime() Hora getInteger() Inteiro getIntervaloDatas() Array de Datas getLong() Longo getListLong() Lista de Longos getBigDecimal() Decimal getListInteger() Lista de Inteiros getCritDataInterval \u00b6 Este m\u00e9todo cria um Criterion a partir de duas datas. Argumentos: arg1: Array[LocalDate] - Intervalo de datas arg2: String - Nome do campo na base de dados Exemplo def datas = [ '2021-01-01' , '2021-12-31' ] getCritDataInterval ( datas , \"abb01data\" ) getWhereDataInterval \u00b6 Este m\u00e9todo cria uma String com um Where a partir de duas datas. Argumentos: arg1: String - Operador (WHERE, AND, OR) arg2: Array[LocalDate] - Intervalo de datas arg3: String - Nome do campo na base de dados Exemplo def datas = [ '2021-01-01' , '2021-12-31' ] getWhereDataInterval ( \"WHERE\" , datas , \"abb01data\" ) getWhereIntegerInterval \u00b6 Este m\u00e9todo cria uma String com um Where a partir de dois inteiros. Argumentos: arg1: String - Operador (WHERE, AND, OR) arg2: Integer - N\u00famero Inicial arg3: Integer - N\u00famero Final arg4: String - Nome do campo na base de dados Exemplo getWhereIntegerInterval ( \"WHERE\" , 1 , 9 , \"eaa01esMov\" ) addWhereOrAnd \u00b6 Este m\u00e9todo cria uma String com um Where a partir de um Array de dados. Argumentos: arg1: String - Operador (AND, OR) arg2: Array[String] - Condi\u00e7\u00f5es do Where Exemplo def condicoes = [ \"abm01tipo = 1\" , \"abm01codigo = '0101001'\" ] addWhereOrAnd ( \"AND\" , condicoes ) round \u00b6 Este arredenda um valor Decimal para a quantidade de casas definido no argumento. Argumentos: arg1: BigDecimal - Dicimal a arredondar arg2: int - Casas decimais Exemplo Retorno def decimal = 12.8867899 def duasCasas = round ( decimal , 2 ) 12.89 trunc \u00b6 Este trunca um valor Decimal para a quantidade de casas definido no argumento. Argumentos: arg1: BigDecimal - Dicimal a arredondar arg2: int - Casas decimais Exemplo Retorno def decimal = 12.8867899 def duasCasas = trunc ( decimal , 3 ) 12.886 M\u00e9todos do Script de Opera\u00e7\u00f5es \u00b6 Um Script de Opera\u00e7\u00e3o permite a manipula\u00e7\u00e3o dos componentes de tela do SAM, interferir em a\u00e7\u00f5es ou processos ou at\u00e9 mesmo criar componentes, a\u00e7\u00f5es ou processos customizados. Os componentes de tela do SAM s\u00e3o construidos a partir de componentes Swing , sendo assim, os m\u00e9todos aplicaveis aos componentes swing s\u00e3o aplicados aos componentes do SAM. As tarefas do SAM s\u00e3o divididas em dois tipos: Cadastros e Processos . execute \u00b6 Este m\u00e9todo \u00e9 executado antes da tarefa ser aberta, nele ser\u00e3o feitas as altera\u00e7\u00f5es em componentes visuais ou processos da tela. preSalvar \u00b6 Este m\u00e9todo \u00e9 executado nos cadastros sempre que o usu\u00e1rio salvar (F9) um registro. posSalvar \u00b6 Este m\u00e9todo \u00e9 executado nos cadastros ap\u00f3s o usu\u00e1rio salvar (F9) um registro. M\u00e9todos de Intera\u00e7\u00e3o: \u00b6 M\u00e9todos criados para avisar, alertar, interromper e questionar o usu\u00e1rio. exibirInformacao \u00b6 Exibir em uma tela uma mensagem apenas informativa. Argumentos: arg1: String - Mensagem a ser exibida Exemplo exibirInformacao ( \"Ol\u00e1 Mundo!\" ) exibirAtencao \u00b6 Exibir em uma tela uma mensagem de alerta/aten\u00e7\u00e3o por\u00e9m sem interromper o processo. Argumentos: arg1: String - Mensagem a ser exibida Exemplo exibirAtencao ( \"O saldo da conta corrente est\u00e1 negativo.\" ) exibirQuestao \u00b6 Exibir em uma tela uma quest\u00e3o com dois bot\u00f5es [SIM, N\u00c3O] retornando [false] para [N\u00c3O] e [true] para [SIM]. Argumentos: arg1: String - Mensagem a ser exibida Exemplo def resposta = exibirQuestao ( \"Deseja continuar o processo?\" ) M\u00e9todos para Banco de Dados: \u00b6 M\u00e9todos para fazer consultas, salvar e deletar dados no banco conforme a SQL criada pelo usu\u00e1rio. executarConsulta \u00b6 Executa a SQL informada no banco de dados. Argumentos: arg1: String - SQL a ser executada no banco de dados Exemplo executarConsulta ( \"SELECT * FROM Abh80 LIMIT 1\" ) executarSalvarOuExcluir \u00b6 Executa uma SQL sem retorno, ou seja, apenas uma SQL para salvar (INSERT/UPDATE) ou excluir (DELETE) um registro no banco de dados. Argumentos: arg1: String - SQL a ser executada no banco de dados Exemplo executarSalvarOuExcluir ( \" UPDATE Abh80 SET abh80nome = 'Jos\u00e9' ) M\u00e9todos para Manipula\u00e7\u00e3o da tela: \u00b6 M\u00e9todos para fazer altera\u00e7\u00f5es em componentes da tela. ocultarColunas \u00b6 Oculta uma coluna de uma determinada Spread (Tabela) da tela. Argumentos: arg1: MSpread - Spread que ter\u00e1 as colunas ocultas arg1: int - \u00cdndice das colunas que ser\u00e3o ocultas separadas por virgula Exemplo def spread = getComponente ( \"nomeSpread\" ) ocultarColunas ( spread , 0 , 3 , 5 , 10 ) criarBotao \u00b6 Cria um bot\u00e3o customizado na parte inferior da tela devendo receber dois argumentos: o primeiro indicando qual o texto do bot\u00e3o e o segundo uma fun\u00e7\u00e3o que ser\u00e1 executada ao clicar. Argumentos: arg1: String - Texto que ser\u00e1 exibido no bot\u00e3o arg1: ActionListener - Fun\u00e7\u00e3o que ser\u00e1 executada ao clicar Exemplo criarBotao ( \"Salvar\" , { exibirInformacao ( \"Voc\u00ea clicou no bot\u00e3o\" ) }) mostrarBotoes \u00b6 Este m\u00e9todo deve ser chamado logo ap\u00f3s a cria\u00e7\u00e3o dos bot\u00f5es customizados para que eles possam ser exibidos na tela. Argumentos: arg1: int - Tamanho dos bot\u00f5es, por padr\u00e3o \u00e9 100. Exemplo criarBotao ( \"Salvar\" , { salvarRegistro () }) mostrarBotoes ( 150 ) alterarTamanhoTela \u00b6 Altera a altura e a largura da tela somando os valores recebido como argumento ao tamanho original. Argumentos: arg1: int - Largura que a tela ser\u00e1 alterada arg1: int - Altura que a tela ser\u00e1 alterada Exemplo alterarTamanhoTela ( 10 , 50 )","title":"M\u00e9todos"},{"location":"metodos/#metodos","text":"Para facilitar o desenvolvimento das customiza\u00e7\u00f5es e integra\u00e7\u00f5es o SAM conta com uma vasta biblioteca de m\u00e9todos e fun\u00e7\u00f5es para realizar os mais diversos tipos de processos. Em defini\u00e7\u00e3o, um m\u00e9todo \u00e9 equivalente a uma fun\u00e7\u00e3o, subrotina ou procedimento escrito em uma certa linguagem de programa\u00e7\u00e3o. Nota A partir de agora veremos alguns termos que s\u00e3o exclusivos do SAM, recomendamos fortemente que voc\u00ea leia e conhe\u00e7a um pouco mais sobre a estrutura do SAM. Visite nosso manual . Os m\u00e9todos que veremos a seguir, pode ou n\u00e3o estar dispon\u00edvel para utiliza\u00e7\u00e3o nos Tipos de Processos existentes no SAM. Estes processos s\u00e3o dividos em dois grupos, os que s\u00e3o criados a partir do SAMDEV e os Scripts de Opera\u00e7\u00f5es que s\u00e3o criados a partir de cada tarefa espec\u00edfica. Cada processo ser\u00e1 identificado como: F\u00f3rmulas, Listagens, Cubos de Decis\u00f5es, Servlets, Script de Opera\u00e7\u00f5es.","title":"M\u00e9todos"},{"location":"metodos/#obterempresaativa","text":"Este m\u00e9todo retorna um objeto do tipo Aac10 contendo os dados da empresa ativa. Exemplo def aac10 = obterEmpresaAtiva ()","title":"obterEmpresaAtiva"},{"location":"metodos/#obterusuariologado","text":"Este m\u00e9todo retorna um objeto do tipo Aab10 contendo os dados do usu\u00e1rio logado no sistema. Exemplo def aab10 = obterUsuarioLogado ()","title":"obterUsuarioLogado"},{"location":"metodos/#getacessoaobanco","text":"Este m\u00e9todo retorna uma cole\u00e7\u00e3o de m\u00e9todos uteis para manipula\u00e7\u00e3o do banco de dados descritos a baixo:","title":"getAcessoAoBanco"},{"location":"metodos/#buscarlistadetablemap","text":"Este m\u00e9todos retorna uma lista de TableMap contendo os registros obtidos a partir da execu\u00e7\u00e3o de uma SQL. Argumentos: arg1: String - SQL a ser executada. arg2: ? boolean - Define se o resultado ser\u00e1 paginado. arg3: ? int - P\u00e1gina a iniciar. arg4: ? Array[ Parametro ] - Par\u00eametros existentes na SQL. Exemplo Retorno getAcessoAoBanco (). buscarListaDeTableMap ( \"SELECT aac10codigo, aac10rs FROM aac10\" ) { 0 : { \"aac10codigo\" : \"00001\" , \"aac10rs\" : \"Empresa Fict\u00edcia LTDA\" }, 1 : { \"aac10codigo\" : \"00002\" , \"aac10rs\" : \"Empresa Teste LTDA\" } }","title":"buscarListaDeTableMap"},{"location":"metodos/#buscarunicotablemap","text":"Este m\u00e9todos retorna um \u00fanico TableMap contendo o registro obtido a partir da execu\u00e7\u00e3o de uma SQL. Argumentos: arg1: String - SQL a ser executada. arg2: ? Array[ Parametro ] - Par\u00eametros existentes na SQL. Exemplo Retorno getAcessoAoBanco (). buscarUnicoTableMap ( \"SELECT aac10codigo, aac10rs FROM aac10 WHERE aac10codigo = '00001'\" ) { \"aac10codigo\" : \"00001\" , \"aac10rs\" : \"Empresa Fict\u00edcia LTDA\" }","title":"buscarUnicoTableMap"},{"location":"metodos/#buscarlistaderegistros","text":"Este m\u00e9todos retorna uma lista de Registros obtidos a partir da execu\u00e7\u00e3o de uma SQL. Argumentos: arg1: String - SQL a ser executada. arg2: ? boolean - Define se o resultado ser\u00e1 paginado. arg3: ? int - P\u00e1gina a iniciar. arg4: ? Array[ Parametro ] - Par\u00eametros existentes na SQL. Exemplo Retorno getAcessoAoBanco (). buscarListaDeRegistros ( \"SELECT aac10id, aac10codigo, aac10rs FROM aac10\" ) { 0 : object ( Aac10 ) # 1 ( 3 ) { private aac10id = 12345 , private aac10codigo = \"00001\" , private aac10rs = \"Empresa Fict\u00edcia LTDA\" }, 1 : object ( Aac10 ) # 2 ( 3 ) { private aac10id = 12346 , private aac10codigo = \"00002\" , private aac10rs = \"Empresa Teste LTDA\" } }","title":"buscarListaDeRegistros"},{"location":"metodos/#buscarregistrounico","text":"Este m\u00e9todos retorna um \u00fanico Registro obtido a partir da execu\u00e7\u00e3o de uma SQL. Argumentos: arg1: String - SQL a ser executada. arg2: ? Array[ Parametro ] - Par\u00eametros existentes na SQL. Exemplo Retorno getAcessoAoBanco (). buscarRegistroUnico ( \"SELECT aac10id, aac10codigo, aac10rs FROM aac10 WHERE aac10id = 12345\" ) object ( Aac10 ) # 1 ( 3 ) { private aac10id = 12345 , private aac10codigo = \"00001\" , private aac10rs = \"Empresa Fict\u00edcia LTDA\" }","title":"buscarRegistroUnico"},{"location":"metodos/#buscarmultiresultset","text":"Este m\u00e9todos retorna um objeto do tipo MultiResultSet contendo os registros obtidos a partir da execu\u00e7\u00e3o de uma SQL. Argumentos: arg1: String - SQL a ser executada. arg2: ? Array[ Parametro ] - Par\u00eametros existentes na SQL. Exemplo Retorno getAcessoAoBanco (). buscarMultiResultSet ( \"SELECT aac10codigo, aac10rs FROM aac10\" ) object ( MultiResultSet ) # 1 ( 2 ) { aac10codigo = \"00001\" , aac10rs = \"Empresa Fict\u00edcia LTDA\" }","title":"buscarMultiResultSet"},{"location":"metodos/#obtermapderegistros","text":"Este m\u00e9todos retorna um Mapa contendo os registros obtidos a partir da execu\u00e7\u00e3o de uma SQL. Argumentos: arg1: String - SQL a ser executada. arg2: String - Nome da coluna que ser\u00e1 a chave. arg3: String - Nome da coluna que ser\u00e1 o valor. Exemplo Retorno getAcessoAoBanco (). buscarMultiResultSet ( \"SELECT aac10codigo, aac10rs FROM aac10\" , \"aac10codigo\" , \"aac10rs\" ) object ( HashMap ) # 1 ( 2 ) { \"aac10codigo\" : \"00001\" , \"aac10rs\" : \"Empresa Fict\u00edcia LTDA\" }","title":"obterMapDeRegistros"},{"location":"metodos/#obterlistadebigdecimal","text":"Este m\u00e9todos retorna uma lista de Decimais obtidos a partir da execu\u00e7\u00e3o de uma SQL. Argumentos: arg1: String - SQL a ser executada. arg2: ? boolean - Define se o resultado ser\u00e1 paginado. arg3: ? int - P\u00e1gina a iniciar. arg4: ? Array[ Parametro ] - Par\u00eametros existentes na SQL. Exemplo Retorno getAcessoAoBanco (). obterListaDeBigDecimal ( \"SELECT eaa01valor FROM Eaa01\" ) { 0 : 256.012 1 : 45.6988 }","title":"obterListaDeBigDecimal"},{"location":"metodos/#obterbigdecimal","text":"Este m\u00e9todos retorna um Decimal obtido a partir da execu\u00e7\u00e3o de uma SQL. Argumentos: arg1: String - SQL a ser executada. arg2: ? Array[ Parametro ] - Par\u00eametros existentes na SQL. Exemplo Retorno getAcessoAoBanco (). obterBigDecimal ( \"SELECT eaa01valor FROM eaa01 WHERE eaa01id = 12345\" ) 457.65559","title":"obterBigDecimal"},{"location":"metodos/#obterlistadeinteger","text":"Este m\u00e9todos retorna uma lista de Inteiros obtidos a partir da execu\u00e7\u00e3o de uma SQL. Argumentos: arg1: String - SQL a ser executada. arg2: ? boolean - Define se o resultado ser\u00e1 paginado. arg3: ? int - P\u00e1gina a iniciar. arg4: ? Array[ Parametro ] - Par\u00eametros existentes na SQL. Exemplo Retorno getAcessoAoBanco (). obterListaDeInteger ( \"SELECT eaa01esMov FROM Eaa01\" ) { 0 : 0 1 : 1 }","title":"obterListaDeInteger"},{"location":"metodos/#obterinteger","text":"Este m\u00e9todos retorna um Inteiro obtido a partir da execu\u00e7\u00e3o de uma SQL. Argumentos: arg1: String - SQL a ser executada. arg2: ? Array[ Parametro ] - Par\u00eametros existentes na SQL. Exemplo Retorno getAcessoAoBanco (). obterInteger ( \"SELECT eaa01esMov FROM eaa01 WHERE eaa01id = 12345\" ) 1","title":"obterInteger"},{"location":"metodos/#obterlistadedate","text":"Este m\u00e9todos retorna uma lista de objetos do tipo LocalDate obtidos a partir da execu\u00e7\u00e3o de uma SQL. Argumentos: arg1: String - SQL a ser executada. arg2: ? boolean - Define se o resultado ser\u00e1 paginado. arg3: ? int - P\u00e1gina a iniciar. arg4: ? Array[ Parametro ] - Par\u00eametros existentes na SQL. Exemplo Retorno getAcessoAoBanco (). obterListaDeDate ( \"SELECT abb01data FROM abb01\" ) { 0 : \"2021-01-01\" 1 : \"2020-02-10\" }","title":"obterListaDeDate"},{"location":"metodos/#obterdate","text":"Este m\u00e9todos retorna um objeto do tipo LocalDate obtido a partir da execu\u00e7\u00e3o de uma SQL. Argumentos: arg1: String - SQL a ser executada. arg2: ? Array[ Parametro ] - Par\u00eametros existentes na SQL. Exemplo Retorno getAcessoAoBanco (). obterDate ( \"SELECT abb01data FROM abb01data WHERE abb01id = 12345\" ) \"2021-12-31\"","title":"obterDate"},{"location":"metodos/#obterlistadestring","text":"Este m\u00e9todos retorna uma lista de String obtidas a partir da execu\u00e7\u00e3o de uma SQL. Argumentos: arg1: String - SQL a ser executada. arg2: ? boolean - Define se o resultado ser\u00e1 paginado. arg3: ? int - P\u00e1gina a iniciar. arg4: ? Array[ Parametro ] - Par\u00eametros existentes na SQL. Exemplo Retorno getAcessoAoBanco (). obterListaDeString ( \"SELECT abh80nome FROM abh80\" ) { 0 : \"Jos\u00e9 Pereira Lima\" 1 : \"Alberto Mendes\" }","title":"obterListaDeString"},{"location":"metodos/#obterstring","text":"Este m\u00e9todos retorna uma String obtida a partir da execu\u00e7\u00e3o de uma SQL. Argumentos: arg1: String - SQL a ser executada. arg2: ? Array[ Parametro ] - Par\u00eametros existentes na SQL. Exemplo Retorno getAcessoAoBanco (). obterString ( \"SELECT abh80nome FROM abh80 WHERE abh80id = 12345\" ) \"Pedro Siqueira de Campos\"","title":"obterString"},{"location":"metodos/#obterlistadelong","text":"Este m\u00e9todos retorna uma lista de Log obtidos a partir da execu\u00e7\u00e3o de uma SQL. Argumentos: arg1: String - SQL a ser executada. arg2: ? boolean - Define se o resultado ser\u00e1 paginado. arg3: ? int - P\u00e1gina a iniciar. arg4: ? Array[ Parametro ] - Par\u00eametros existentes na SQL. Exemplo Retorno getAcessoAoBanco (). obterListaDeLong ( \"SELECT aac10id FROM aac10\" ) { 0 : 9513697880 1 : 1055006470 }","title":"obterListaDeLong"},{"location":"metodos/#obterlong","text":"Este m\u00e9todos retorna um Long obtido a partir da execu\u00e7\u00e3o de uma SQL. Argumentos: arg1: String - SQL a ser executada. arg2: ? Array[ Parametro ] - Par\u00eametros existentes na SQL. Exemplo Retorno getAcessoAoBanco (). obterLong ( \"SELECT aac10id FROM aac10 WHERE aac10id = 1234567890\" ) 1234567890","title":"obterLong"},{"location":"metodos/#buscarregistrounicobyid","text":"Este m\u00e9todo retorna um registro de uma tabela pelo id informado como argumento. Argumentos: arg1: String - Nome da tabela. arg2: Long - ID do registro. Exemplo Retorno getAcessoAoBanco (). buscarRegistroUnicoById ( \"Aah03\" , 12345 ) object ( Aah03 ) # 1 ( 2 ) { private aah03id = 12345 , private aah03tabela = \"Tabela Custom\" }","title":"buscarRegistroUnicoById"},{"location":"metodos/#buscarregistrounicobycriterion","text":"Este m\u00e9todo retorna um registro de uma tabela filtrado por um Criterion . Argumentos: arg1: String - Nome da tabela. arg2: Criterion - Filtro. Exemplo Retorno return getAcessoAoBanco (). buscarRegistroUnicoByCriterion ( \"Aah03\" , Criterions . eq ( \"aah03id\" , 12345 )) object ( Aah03 ) # 1 ( 2 ) { private aah03id = 12345 , private aah03tabela = \"Tabela Custom\" }","title":"buscarRegistroUnicoByCriterion"},{"location":"metodos/#criarparametrosql","text":"Este m\u00e9todo retorna um objeto do tipo Parametro para ser utilizado nos m\u00e9todos que realizam a manipula\u00e7\u00e3o do banco de dados que vimos acima. Argumentos: arg1: String - Chave arg2: Object - Valor Exemplo def sql = \" SELECT * FROM Abm01 WHERE abm01codigo = :codigo AND abm01tipo = :tipo \" def paramCodigo = criarParametroSql ( \"codigo\" , \"0101001\" ) def paramTipo = criarParametroSql ( \"tipo\" , 0 ) return getAcessoAoBanco (). buscarRegistroUnico ( sql , paramCodigo , paramTipo )","title":"criarParametroSql"},{"location":"metodos/#obterwherepadrao","text":"Este m\u00e9todo retorna um WHERE filtrando pelos Campos Default para ser utilizado em SQLs. Argumentos: arg1: String - Nome da Classe arg2: ? String - Comparador Ex.: WHERE, AND, OR Exemplo Retorno def sql = \"SELECT * FROM Eaa01 WHERE eaa01id = 123 \" + obterWherePadrao ( \"Eaa01\" , \"AND\" ) \"SELECT * FROM Eaa01 WHERE eaa01id = 123 AND eaa01gc IN (1, 2, 3)\"","title":"obterWherePadrao"},{"location":"metodos/#selecionaralinhamento","text":"O alinhamento de valores permite fazer um alinhamento dos campos de registros contidos em um leiaute, uma f\u00f3rmula, em listagens para alinhar campos livres do sistema (Json), possibilitando usar nas f\u00f3rmulas um nome padronizado. Este m\u00e9todo seleciona qual alinhamento de valores ser\u00e1 utilizado no script Argumentos: arg1: String - C\u00f3digo do alinhamento Exemplo selecionarAlinhamento ( \"0001\" )","title":"selecionarAlinhamento"},{"location":"metodos/#getcampo","text":"Este m\u00e9todo retorna o campo informado no alinhamento de valores pelo conte\u00fado do registro. Este m\u00e9todo deve ser utilizado ap\u00f3s a utiliza\u00e7\u00e3o do m\u00e9todo selecionarAlinhamento Argumentos: arg1: String - Registro arg2: String - Campo Exemplo getCampo ( \"C100\" , \"ICMS\" )","title":"getCampo"},{"location":"metodos/#getsession","text":"Este m\u00e9todo retorna um objeto do tipo Session . Exemplo def session = getSession () session . persist ( abc )","title":"getSession"},{"location":"metodos/#interromper","text":"Este m\u00e9todo lan\u00e7a uma exce\u00e7\u00e3o ao processo, interrompendo-o. Argumentos: arg1: String - Mensagem a ser exibida. Exemplo interromper ( \"Voc\u00ea n\u00e3o tem permiss\u00e3o para continuar.\" )","title":"interromper"},{"location":"metodos/#convertercorporequisicaoparastring","text":"Este m\u00e9todo converte o corpo da requisi\u00e7\u00e3o enviado a um Servlet para String. Exemplo def body = converterCorpoRequisicaoParaString ()","title":"converterCorpoRequisicaoParaString"},{"location":"metodos/#convertercorporequisicaoparaobjeto","text":"Este m\u00e9todo converte o corpo da requisi\u00e7\u00e3o enviado a um Servlet para um objeto do tipo informado como argumento. Argumentos: arg1: Class<?> - Tipo do objeto que ser\u00e1 convertido Exemplo TableMap body = converterCorpoRequisicaoParaObjeto ( TableMap . class )","title":"converterCorpoRequisicaoParaObjeto"},{"location":"metodos/#getparametrorequisicao","text":"Este m\u00e9todo retorna o conteudo de um par\u00eametro enviado ao Servlet via URL. Argumentos: arg1: String - Nome do par\u00e2metro Exemplo // URL: https://endereco.sam/caminhoServlet?id_registro=12345 def id_registro = getParametroRequisicao ( \"id_registro\" )","title":"getParametroRequisicao"},{"location":"metodos/#metodos-get","text":"Sempre que uma Listagem, um Cubo ou uma F\u00f3rmula \u00e9 executado, alguns dados precisam ser enviados para o processo, estes dados podem ser conteudo dos filtros, no caso dos processos de extra\u00e7\u00e3o de dados ou das tarefas que enviam informa\u00e7\u00f5es para as f\u00f3rmulas. O envio deste dado \u00e9 feito atrav\u00e9s de um Mapa de chave e valor, para recuperar estes dados utilizamos o m\u00e9todo get() e suas varia\u00e7\u00f5es. Exemplo: Em um relat\u00f3rio existe um campo de data e foi atribuido o nome dataDeInicio . < m-date label = \"Data de Inicio\" v-model = \"filtros.dataDeInicio\" /> Para recuperar o conteudo deste campo a partir do c\u00f3digo groovy utilizamos o m\u00e9todo get() . def dataDeInicio = get ( \"dataDeInicio\" ) Este m\u00e9todo por si s\u00f3 retorna um objeto. Cantamos com alguma varia\u00e7\u00f5es deste m\u00e9todo que nos trazem os dados j\u00e1 convertidos. M\u00e9todo Retorno M\u00e9todo Retorno getString() Texto getLocalDate() Data getBoolean() Booleano getLocalTime() Hora getInteger() Inteiro getIntervaloDatas() Array de Datas getLong() Longo getListLong() Lista de Longos getBigDecimal() Decimal getListInteger() Lista de Inteiros","title":"M\u00e9todos get()"},{"location":"metodos/#getcritdatainterval","text":"Este m\u00e9todo cria um Criterion a partir de duas datas. Argumentos: arg1: Array[LocalDate] - Intervalo de datas arg2: String - Nome do campo na base de dados Exemplo def datas = [ '2021-01-01' , '2021-12-31' ] getCritDataInterval ( datas , \"abb01data\" )","title":"getCritDataInterval"},{"location":"metodos/#getwheredatainterval","text":"Este m\u00e9todo cria uma String com um Where a partir de duas datas. Argumentos: arg1: String - Operador (WHERE, AND, OR) arg2: Array[LocalDate] - Intervalo de datas arg3: String - Nome do campo na base de dados Exemplo def datas = [ '2021-01-01' , '2021-12-31' ] getWhereDataInterval ( \"WHERE\" , datas , \"abb01data\" )","title":"getWhereDataInterval"},{"location":"metodos/#getwhereintegerinterval","text":"Este m\u00e9todo cria uma String com um Where a partir de dois inteiros. Argumentos: arg1: String - Operador (WHERE, AND, OR) arg2: Integer - N\u00famero Inicial arg3: Integer - N\u00famero Final arg4: String - Nome do campo na base de dados Exemplo getWhereIntegerInterval ( \"WHERE\" , 1 , 9 , \"eaa01esMov\" )","title":"getWhereIntegerInterval"},{"location":"metodos/#addwhereorand","text":"Este m\u00e9todo cria uma String com um Where a partir de um Array de dados. Argumentos: arg1: String - Operador (AND, OR) arg2: Array[String] - Condi\u00e7\u00f5es do Where Exemplo def condicoes = [ \"abm01tipo = 1\" , \"abm01codigo = '0101001'\" ] addWhereOrAnd ( \"AND\" , condicoes )","title":"addWhereOrAnd"},{"location":"metodos/#round","text":"Este arredenda um valor Decimal para a quantidade de casas definido no argumento. Argumentos: arg1: BigDecimal - Dicimal a arredondar arg2: int - Casas decimais Exemplo Retorno def decimal = 12.8867899 def duasCasas = round ( decimal , 2 ) 12.89","title":"round"},{"location":"metodos/#trunc","text":"Este trunca um valor Decimal para a quantidade de casas definido no argumento. Argumentos: arg1: BigDecimal - Dicimal a arredondar arg2: int - Casas decimais Exemplo Retorno def decimal = 12.8867899 def duasCasas = trunc ( decimal , 3 ) 12.886","title":"trunc"},{"location":"metodos/#metodos-do-script-de-operacoes","text":"Um Script de Opera\u00e7\u00e3o permite a manipula\u00e7\u00e3o dos componentes de tela do SAM, interferir em a\u00e7\u00f5es ou processos ou at\u00e9 mesmo criar componentes, a\u00e7\u00f5es ou processos customizados. Os componentes de tela do SAM s\u00e3o construidos a partir de componentes Swing , sendo assim, os m\u00e9todos aplicaveis aos componentes swing s\u00e3o aplicados aos componentes do SAM. As tarefas do SAM s\u00e3o divididas em dois tipos: Cadastros e Processos .","title":"M\u00e9todos do Script de Opera\u00e7\u00f5es"},{"location":"metodos/#execute","text":"Este m\u00e9todo \u00e9 executado antes da tarefa ser aberta, nele ser\u00e3o feitas as altera\u00e7\u00f5es em componentes visuais ou processos da tela.","title":"execute"},{"location":"metodos/#presalvar","text":"Este m\u00e9todo \u00e9 executado nos cadastros sempre que o usu\u00e1rio salvar (F9) um registro.","title":"preSalvar"},{"location":"metodos/#possalvar","text":"Este m\u00e9todo \u00e9 executado nos cadastros ap\u00f3s o usu\u00e1rio salvar (F9) um registro.","title":"posSalvar"},{"location":"metodos/#metodos-de-interacao","text":"M\u00e9todos criados para avisar, alertar, interromper e questionar o usu\u00e1rio.","title":"M\u00e9todos de Intera\u00e7\u00e3o:"},{"location":"metodos/#exibirinformacao","text":"Exibir em uma tela uma mensagem apenas informativa. Argumentos: arg1: String - Mensagem a ser exibida Exemplo exibirInformacao ( \"Ol\u00e1 Mundo!\" )","title":"exibirInformacao"},{"location":"metodos/#exibiratencao","text":"Exibir em uma tela uma mensagem de alerta/aten\u00e7\u00e3o por\u00e9m sem interromper o processo. Argumentos: arg1: String - Mensagem a ser exibida Exemplo exibirAtencao ( \"O saldo da conta corrente est\u00e1 negativo.\" )","title":"exibirAtencao"},{"location":"metodos/#exibirquestao","text":"Exibir em uma tela uma quest\u00e3o com dois bot\u00f5es [SIM, N\u00c3O] retornando [false] para [N\u00c3O] e [true] para [SIM]. Argumentos: arg1: String - Mensagem a ser exibida Exemplo def resposta = exibirQuestao ( \"Deseja continuar o processo?\" )","title":"exibirQuestao"},{"location":"metodos/#metodos-para-banco-de-dados","text":"M\u00e9todos para fazer consultas, salvar e deletar dados no banco conforme a SQL criada pelo usu\u00e1rio.","title":"M\u00e9todos para Banco de Dados:"},{"location":"metodos/#executarconsulta","text":"Executa a SQL informada no banco de dados. Argumentos: arg1: String - SQL a ser executada no banco de dados Exemplo executarConsulta ( \"SELECT * FROM Abh80 LIMIT 1\" )","title":"executarConsulta"},{"location":"metodos/#executarsalvarouexcluir","text":"Executa uma SQL sem retorno, ou seja, apenas uma SQL para salvar (INSERT/UPDATE) ou excluir (DELETE) um registro no banco de dados. Argumentos: arg1: String - SQL a ser executada no banco de dados Exemplo executarSalvarOuExcluir ( \" UPDATE Abh80 SET abh80nome = 'Jos\u00e9' )","title":"executarSalvarOuExcluir"},{"location":"metodos/#metodos-para-manipulacao-da-tela","text":"M\u00e9todos para fazer altera\u00e7\u00f5es em componentes da tela.","title":"M\u00e9todos para Manipula\u00e7\u00e3o da tela:"},{"location":"metodos/#ocultarcolunas","text":"Oculta uma coluna de uma determinada Spread (Tabela) da tela. Argumentos: arg1: MSpread - Spread que ter\u00e1 as colunas ocultas arg1: int - \u00cdndice das colunas que ser\u00e3o ocultas separadas por virgula Exemplo def spread = getComponente ( \"nomeSpread\" ) ocultarColunas ( spread , 0 , 3 , 5 , 10 )","title":"ocultarColunas"},{"location":"metodos/#criarbotao","text":"Cria um bot\u00e3o customizado na parte inferior da tela devendo receber dois argumentos: o primeiro indicando qual o texto do bot\u00e3o e o segundo uma fun\u00e7\u00e3o que ser\u00e1 executada ao clicar. Argumentos: arg1: String - Texto que ser\u00e1 exibido no bot\u00e3o arg1: ActionListener - Fun\u00e7\u00e3o que ser\u00e1 executada ao clicar Exemplo criarBotao ( \"Salvar\" , { exibirInformacao ( \"Voc\u00ea clicou no bot\u00e3o\" ) })","title":"criarBotao"},{"location":"metodos/#mostrarbotoes","text":"Este m\u00e9todo deve ser chamado logo ap\u00f3s a cria\u00e7\u00e3o dos bot\u00f5es customizados para que eles possam ser exibidos na tela. Argumentos: arg1: int - Tamanho dos bot\u00f5es, por padr\u00e3o \u00e9 100. Exemplo criarBotao ( \"Salvar\" , { salvarRegistro () }) mostrarBotoes ( 150 )","title":"mostrarBotoes"},{"location":"metodos/#alterartamanhotela","text":"Altera a altura e a largura da tela somando os valores recebido como argumento ao tamanho original. Argumentos: arg1: int - Largura que a tela ser\u00e1 alterada arg1: int - Altura que a tela ser\u00e1 alterada Exemplo alterarTamanhoTela ( 10 , 50 )","title":"alterarTamanhoTela"},{"location":"parametro/","text":"","title":"Parametro"},{"location":"processos/","text":"Tipos de Processos \u00b6 Abaixo voc\u00ea entender\u00e1 melhor sobre alguns processos que podem ser customizados no SAM. Extra\u00e7\u00e3o de dados \u00b6 O processo de Extra\u00e7\u00e3o de dados consiste em se comunicar com bancos de dados para capturar os dados que ser\u00e3o disponibilizados para o sistema destino. Toda a extra\u00e7\u00e3o de informa\u00e7\u00f5es da base de dados s\u00e3o atrav\u00e9s de consultas, listagens, relat\u00f3rios, resumos, estat\u00edsticas, demonstra\u00e7\u00f5es, an\u00e1lises, documentos fiscais e n\u00e3o fiscais etc. Listagens \u00b6 As Listagens s\u00e3o documentos que disponibilizam informa\u00e7\u00f5es claras e objetivas de setores da empresa, contando sempre com informa\u00e7\u00f5es atualizadas e confi\u00e1veis, fornecendo dados que s\u00e3o utilizados como base para a tomada de decis\u00e3o e planejamento de a\u00e7\u00f5es. \u00c9 preciso apresentar esses dados em um formato que facilite a interpreta\u00e7\u00e3o. S\u00e3o apresentados em forma de tabelas e comparativos, mas podem ser mais completos e estruturados. Veja alguns exemplos . Cubo de Decis\u00f5es \u00b6 Esta ferramenta auxilia na tomada de decis\u00e3o da empresa, portanto, \u00e9 importante o desenvolvedor, conhecer este meio mais f\u00e1cil para obter melhores resultados. O Cubo de Decis\u00f5es possibilita visualizar as atividades da empresa de modo gr\u00e1fico e simplificado, bem como, o seu desempenho, potenciais riscos ou desvios do planejado e a capacidade de obter indicadores de gest\u00e3o. Veja alguns exemplos . Gedgets \u00b6 Gadgets s\u00e3o elementos que possuem uma fun\u00e7\u00e3o, adicionar conte\u00fado extra ao painel do SAMERP. Por exemplo, gadgets podem realizar consultas no banco de dados e exibir o conte\u00fado em forma de gr\u00e1ficos, listas, \u00edcones e muito mais. Os gadgets s\u00e3o constru\u00eddos a partir de um c\u00f3digo HTML, podendo usar CSS e Javascript, e tamb\u00e9m em Groovy. Os gadgets podem ser colocados em qualquer lugar do painel, na realidade, tudo que voc\u00ea precisa fazer \u00e9 arrastar e soltar o gadget at\u00e9 a \u00e1rea escolhida. Veja alguns exemplos . Regras de Neg\u00f3cios \u00b6 Regras de neg\u00f3cio s\u00e3o padr\u00f5es que condicionam o funcionamento do neg\u00f3cio, sendo comumente aplicadas no contexto da arquitetura de softwares. Voc\u00ea pode escrever suas regras de neg\u00f3cio atrav\u00e9s de f\u00f3rmulas, interceptadores ou scripts de opera\u00e7\u00f5es, possibilitando produzir ou validar dados que venham dar respostas, mais adequadas \u00e0 gest\u00e3o de seus neg\u00f3cios. F\u00f3rmulas \u00b6 Uma f\u00f3rmula \u00e9 um m\u00e9todo pr\u00e1tico de resolver um assunto, dar instru\u00e7\u00f5es ou expressar uma opera\u00e7\u00e3o. Em algumas tarefas do SAM4 o processamento de dados pode ser feito de forma customizada, ou seja, cada empresa pode processar livremente. Essas customiza\u00e7\u00f5es s\u00e3o feitas atrav\u00e9s das f\u00f3rmulas. Por exemplo, c\u00e1lculo de documentos, c\u00e1lculo de folha de pagamento, manipula\u00e7\u00e3o de valores de itens no estoque. Veja alguns exemplos . Intercepta\u00e7\u00e3o \u00b6 Interceptor, como o pr\u00f3prio nome sugere, nos permite de forma bem simples interceptar e configurar requisi\u00e7\u00f5es antes delas serem disparadas para o banco de dados. Isso possibilita fazer uma imensid\u00e3o de coisas, um exemplo seria validar se a requisi\u00e7\u00e3o est\u00e1 de acordo com os padr\u00f5es de cadastro de uma determinada empresa, ou de repente bloquear determinados usu\u00e1rio de realizar estas requisi\u00e7\u00f5es, e at\u00e9 tratar objetos antes de terminar a requisi\u00e7\u00e3o. As possibilidades s\u00e3o in\u00fameras. Veja alguns exemplos . Scripts de Opera\u00e7\u00f5es \u00b6 Dentre os Script do SAM o Script de Opera\u00e7\u00f5es \u00e9 o \u00fanico que n\u00e3o \u00e9 desenvolvido pela ferramenta SAMDEV, ele \u00e9 constru\u00eddo dentro da pr\u00f3pria tarefa. Com ele o desenvolvedor pode criar regras operacionais diferentes para cada tarefa, manipular campos da tela, fazer valida\u00e7\u00f5es etc. Basicamente o desenvolvedor consegue manipular toda a tarefa. As telas do SAM s\u00e3o constru\u00eddas em JAVA com SWING, Swing \u00e9 um widget toolkit GUI para uso com o Java. Ele possui alguns componentes como, Campo texto, campo num\u00e9rico, campo combo, etc. Cada um destes componentes possuem algumas propriedades que podem ser alteradas para configurar tamanho, largura, altura, cor, fonte, etc. Veja alguns exemplos . Integra\u00e7\u00e3o com o SAM \u00b6 A integra\u00e7\u00e3o com o SAM pode ser realizada fazendo ou recebendo requisi\u00e7\u00f5es de outros sistemas, APIs, servi\u00e7os etc. Essa integra\u00e7\u00e3o pode ser realizado atrav\u00e9s das SERVLETS. Servlets \u00b6 Uma Servlet d\u00e1 uma ideia de servidor pequeno cujo objetivo basicamente \u00e9 receber requisi\u00e7\u00f5es HTTP, process\u00e1-las e responder ao cliente, essa resposta pode ser um JSON, um HTML, uma imagem etc. Veja alguns exemplos .","title":"Tipos de Processos"},{"location":"processos/#tipos-de-processos","text":"Abaixo voc\u00ea entender\u00e1 melhor sobre alguns processos que podem ser customizados no SAM.","title":"Tipos de Processos"},{"location":"processos/#extracao-de-dados","text":"O processo de Extra\u00e7\u00e3o de dados consiste em se comunicar com bancos de dados para capturar os dados que ser\u00e3o disponibilizados para o sistema destino. Toda a extra\u00e7\u00e3o de informa\u00e7\u00f5es da base de dados s\u00e3o atrav\u00e9s de consultas, listagens, relat\u00f3rios, resumos, estat\u00edsticas, demonstra\u00e7\u00f5es, an\u00e1lises, documentos fiscais e n\u00e3o fiscais etc.","title":"Extra\u00e7\u00e3o de dados"},{"location":"processos/#listagens","text":"As Listagens s\u00e3o documentos que disponibilizam informa\u00e7\u00f5es claras e objetivas de setores da empresa, contando sempre com informa\u00e7\u00f5es atualizadas e confi\u00e1veis, fornecendo dados que s\u00e3o utilizados como base para a tomada de decis\u00e3o e planejamento de a\u00e7\u00f5es. \u00c9 preciso apresentar esses dados em um formato que facilite a interpreta\u00e7\u00e3o. S\u00e3o apresentados em forma de tabelas e comparativos, mas podem ser mais completos e estruturados. Veja alguns exemplos .","title":"Listagens"},{"location":"processos/#cubo-de-decisoes","text":"Esta ferramenta auxilia na tomada de decis\u00e3o da empresa, portanto, \u00e9 importante o desenvolvedor, conhecer este meio mais f\u00e1cil para obter melhores resultados. O Cubo de Decis\u00f5es possibilita visualizar as atividades da empresa de modo gr\u00e1fico e simplificado, bem como, o seu desempenho, potenciais riscos ou desvios do planejado e a capacidade de obter indicadores de gest\u00e3o. Veja alguns exemplos .","title":"Cubo de Decis\u00f5es"},{"location":"processos/#gedgets","text":"Gadgets s\u00e3o elementos que possuem uma fun\u00e7\u00e3o, adicionar conte\u00fado extra ao painel do SAMERP. Por exemplo, gadgets podem realizar consultas no banco de dados e exibir o conte\u00fado em forma de gr\u00e1ficos, listas, \u00edcones e muito mais. Os gadgets s\u00e3o constru\u00eddos a partir de um c\u00f3digo HTML, podendo usar CSS e Javascript, e tamb\u00e9m em Groovy. Os gadgets podem ser colocados em qualquer lugar do painel, na realidade, tudo que voc\u00ea precisa fazer \u00e9 arrastar e soltar o gadget at\u00e9 a \u00e1rea escolhida. Veja alguns exemplos .","title":"Gedgets"},{"location":"processos/#regras-de-negocios","text":"Regras de neg\u00f3cio s\u00e3o padr\u00f5es que condicionam o funcionamento do neg\u00f3cio, sendo comumente aplicadas no contexto da arquitetura de softwares. Voc\u00ea pode escrever suas regras de neg\u00f3cio atrav\u00e9s de f\u00f3rmulas, interceptadores ou scripts de opera\u00e7\u00f5es, possibilitando produzir ou validar dados que venham dar respostas, mais adequadas \u00e0 gest\u00e3o de seus neg\u00f3cios.","title":"Regras de Neg\u00f3cios"},{"location":"processos/#formulas","text":"Uma f\u00f3rmula \u00e9 um m\u00e9todo pr\u00e1tico de resolver um assunto, dar instru\u00e7\u00f5es ou expressar uma opera\u00e7\u00e3o. Em algumas tarefas do SAM4 o processamento de dados pode ser feito de forma customizada, ou seja, cada empresa pode processar livremente. Essas customiza\u00e7\u00f5es s\u00e3o feitas atrav\u00e9s das f\u00f3rmulas. Por exemplo, c\u00e1lculo de documentos, c\u00e1lculo de folha de pagamento, manipula\u00e7\u00e3o de valores de itens no estoque. Veja alguns exemplos .","title":"F\u00f3rmulas"},{"location":"processos/#interceptacao","text":"Interceptor, como o pr\u00f3prio nome sugere, nos permite de forma bem simples interceptar e configurar requisi\u00e7\u00f5es antes delas serem disparadas para o banco de dados. Isso possibilita fazer uma imensid\u00e3o de coisas, um exemplo seria validar se a requisi\u00e7\u00e3o est\u00e1 de acordo com os padr\u00f5es de cadastro de uma determinada empresa, ou de repente bloquear determinados usu\u00e1rio de realizar estas requisi\u00e7\u00f5es, e at\u00e9 tratar objetos antes de terminar a requisi\u00e7\u00e3o. As possibilidades s\u00e3o in\u00fameras. Veja alguns exemplos .","title":"Intercepta\u00e7\u00e3o"},{"location":"processos/#scripts-de-operacoes","text":"Dentre os Script do SAM o Script de Opera\u00e7\u00f5es \u00e9 o \u00fanico que n\u00e3o \u00e9 desenvolvido pela ferramenta SAMDEV, ele \u00e9 constru\u00eddo dentro da pr\u00f3pria tarefa. Com ele o desenvolvedor pode criar regras operacionais diferentes para cada tarefa, manipular campos da tela, fazer valida\u00e7\u00f5es etc. Basicamente o desenvolvedor consegue manipular toda a tarefa. As telas do SAM s\u00e3o constru\u00eddas em JAVA com SWING, Swing \u00e9 um widget toolkit GUI para uso com o Java. Ele possui alguns componentes como, Campo texto, campo num\u00e9rico, campo combo, etc. Cada um destes componentes possuem algumas propriedades que podem ser alteradas para configurar tamanho, largura, altura, cor, fonte, etc. Veja alguns exemplos .","title":"Scripts de Opera\u00e7\u00f5es"},{"location":"processos/#integracao-com-o-sam","text":"A integra\u00e7\u00e3o com o SAM pode ser realizada fazendo ou recebendo requisi\u00e7\u00f5es de outros sistemas, APIs, servi\u00e7os etc. Essa integra\u00e7\u00e3o pode ser realizado atrav\u00e9s das SERVLETS.","title":"Integra\u00e7\u00e3o com o SAM"},{"location":"processos/#servlets","text":"Uma Servlet d\u00e1 uma ideia de servidor pequeno cujo objetivo basicamente \u00e9 receber requisi\u00e7\u00f5es HTTP, process\u00e1-las e responder ao cliente, essa resposta pode ser um JSON, um HTML, uma imagem etc. Veja alguns exemplos .","title":"Servlets"},{"location":"query/","text":"","title":"Query"},{"location":"session/","text":"","title":"Session"},{"location":"utils/ChequeUtils/","text":"","title":"ChequeUtils"},{"location":"utils/DateUtils/","text":"","title":"DateUtils"},{"location":"utils/DecimalUtils/","text":"","title":"DecimalUtils"},{"location":"utils/ESocialUtils/","text":"","title":"ESocialUtils"},{"location":"utils/HoleriteUtils/","text":"","title":"HoleriteUtils"},{"location":"utils/InterceptadorUtils/","text":"","title":"InterceptadorUtils"},{"location":"utils/MDFeUtils/","text":"","title":"MDFeUtils"},{"location":"utils/NFeUtils/","text":"","title":"NFeUtils"},{"location":"utils/ReinfUtils/","text":"","title":"ReinfUtils"},{"location":"utils/SCEUtils/","text":"","title":"SCEUtils"},{"location":"utils/SFPUtils/","text":"","title":"SFPUtils"},{"location":"utils/StringUtils/","text":"","title":"StringUtils"},{"location":"utils/Utils/","text":"","title":"Utils"}]}